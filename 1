using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

class LexicalAnalyzer
{
    private static readonly string[] Keywords = { "if", "else", "while", "return", "int", "float", "void" };
    private static readonly HashSet<string> Operators = new HashSet<string> { "+", "-", "*", "/", "=", "==", "!=" };
    private const int MaxIdentifierLength = 30;

    public static void Main(string[] args)
    {
        string input = File.ReadAllText("input.txt");
        Analyze(input);
    }

    private static void Analyze(string input)
    {
        input = RemoveCommentsAndWhitespace(input);
        var tokens = Tokenize(input);

        foreach (var token in tokens)
        {
            Console.WriteLine(token);
        }
    }

    private static string RemoveCommentsAndWhitespace(string input)
    {
        input = Regex.Replace(input, @"//.*?$|/\*.*?\*/", "", RegexOptions.Singleline);
        return Regex.Replace(input, @"\s+", " ");
    }

    private static List<string> Tokenize(string input)
    {
        var tokens = new List<string>();
        var regex = new Regex(@"[a-zA-Z_][a-zA-Z0-9_]*|[0-9]+|[+\-*/=<>!]+");
        var matches = regex.Matches(input);

        foreach (Match match in matches)
        {
            string token = match.Value;

            if (token.Length > MaxIdentifierLength)
            {
                continue;
            }

            if (Array.Exists(Keywords, keyword => keyword == token))
            {
                tokens.Add($"Keyword: {token}");
            }
            else if (Operators.Contains(token))
            {
                tokens.Add($"Operator: {token}");
            }
            else if (Regex.IsMatch(token, @"^[0-9]+$"))
            {
                tokens.Add($"Constant: {token}");
            }
            else
            {
                tokens.Add($"Identifier: {token}");
            }
        }

        return tokens;
    }
}
