#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define MAX_LINE_LENGTH 256

// Function to check if a line is a comment
int isSingleLineComment(const char *line) {
    return strncmp(line, "//", 2) == 0; // Check for single-line comment
}

int isMultiLineCommentStart(const char *line) {
    return strstr(line, "/*") != NULL; // Check for start of multi-line comment
}

int isMultiLineCommentEnd(const char *line) {
    return strstr(line, "*/") != NULL; // Check for end of multi-line comment
}

// Function to process a line and identify comments
void processLine(const char *line, int *inMultiLineComment) {
    if (*inMultiLineComment) {
        // If we are already in a multi-line comment
        printf("Comment: %s\n", line);
        if (isMultiLineCommentEnd(line)) {
            *inMultiLineComment = 0; // End of multi-line comment
        }
    } else {
        // Not in a multi-line comment
        if (isSingleLineComment(line)) {
            printf("Comment: %s\n", line);
        } else if (isMultiLineCommentStart(line)) {
            printf("Comment: %s\n", line);
            *inMultiLineComment = 1; // Start of multi-line comment
        } else {
            printf("Not a comment: %s\n", line);
        }
    }
}

int main() {
    FILE *fp = fopen("input.txt", "r");
    if (fp == NULL) {
        fprintf(stderr, "Could not open file\n");
        return 1;
    }

    char line[MAX_LINE_LENGTH];
    int inMultiLineComment = 0; // Flag to track multi-line comment state

    // Read each line from the file
    while (fgets(line, sizeof(line), fp)) {
        // Remove trailing newline character
        line[strcspn(line, "\n")] = 0;
        processLine(line, &inMultiLineComment);
    }

    // If we end the file while still in a multi-line comment
    if (inMultiLineComment) {
        printf("Warning: File ended while in a multi-line comment.\n");
    }

    fclose(fp);
    return 0;
}
